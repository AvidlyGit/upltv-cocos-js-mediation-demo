import org.apache.tools.ant.taskdefs.condition.Os

apply plugin: 'com.android.application'

android {
    compileSdkVersion PROP_COMPILE_SDK_VERSION.toInteger()
    buildToolsVersion "26.0.1"

    defaultConfig {
//        applicationId "example.cocos2dx.js"
        applicationId "adam.lean.inland"

        minSdkVersion PROP_MIN_SDK_VERSION
        targetSdkVersion PROP_TARGET_SDK_VERSION
        multiDexEnabled true
        versionCode 1
        versionName "1.0"

        ndk {
            abiFilters 'armeabi-v7a'
        }
        externalNativeBuild {
            ndkBuild {
                if (!project.hasProperty("PROP_NDK_MODE") || PROP_NDK_MODE.compareTo('none') != 0) {
                    // skip the NDK Build step if PROP_NDK_MODE is none
                    targets 'cocos2djs'
                    arguments 'NDK_TOOLCHAIN_VERSION=4.9'
                    arguments 'APP_PLATFORM=android-'+PROP_APP_PLATFORM

                    def module_paths = [project.file("../../../cocos2d-x").absolutePath,
                                        project.file("../../../cocos2d-x/cocos").absolutePath,
                                        project.file("../../../cocos2d-x/external").absolutePath]
                    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                        // should use '/'
                        module_paths = module_paths.collect {it.replaceAll('\\\\', '/')}
                        arguments 'NDK_MODULE_PATH=' + module_paths.join(";")
                    }
                    else {
                        arguments 'NDK_MODULE_PATH=' + module_paths.join(':')
                    }

                    arguments '-j' + Runtime.runtime.availableProcessors()
                    abiFilters.addAll(PROP_APP_ABI.split(':').collect{it as String})
                }
            }
        }
    }
    dexOptions {

        incremental true

        javaMaxHeapSize "4g"

    }
    sourceSets.main {
        java.srcDir "src"
        res.srcDir "res"
        jniLibs.srcDir "libs"
        manifest.srcFile "AndroidManifest.xml"
    }

    externalNativeBuild {
        ndkBuild {
            if (!project.hasProperty("PROP_NDK_MODE") || PROP_NDK_MODE.compareTo('none') != 0) {
                // skip the NDK Build step if PROP_NDK_MODE is none
                path "jni/Android.mk"
            }
        }
    }

    signingConfigs {

       release {
            if (project.hasProperty("RELEASE_STORE_FILE")) {
                storeFile file(RELEASE_STORE_FILE)
                storePassword RELEASE_STORE_PASSWORD
                keyAlias RELEASE_KEY_ALIAS
                keyPassword RELEASE_KEY_PASSWORD
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            if (project.hasProperty("RELEASE_STORE_FILE")) {
                signingConfig signingConfigs.release
            }

            externalNativeBuild {
                ndkBuild {
                    arguments 'NDK_DEBUG=0'
                }
            }
        }

        debug {
            externalNativeBuild {
                ndkBuild {
                    arguments 'NDK_DEBUG=1'
                }
            }
        }
    }
}

def getCocosCommandPath() {
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        return 'cocos.bat'
    }
    else {
        // on unix like system, can not get environments variables easily
        // so run a shell script to get environment variable sets by cocos2d-x setup.py
        new ByteArrayOutputStream().withStream { os ->
            def result = exec {
                executable = project.file('get_environment.sh')
                standardOutput = os
            }
            ext.console_path = os.toString().trim()
        }
        return new File(console_path + '/cocos').absolutePath;
    }
}


// a method used to invoke the cocos jscompile command
def compileJS(srcDir, dstDir) {
    def compileArgs = ['jscompile', '-s', srcDir, '-d', dstDir]

    println 'running command : ' + 'cocos ' + compileArgs.join(' ')
    exec {
        // if you meet problem, just replace `getCocosCommandPath()` to the path of cocos command
        executable getCocosCommandPath()
        args compileArgs
    }

    // remove the js files in dstDir
    delete fileTree(dstDir) {
        include '**/*.js'
    }
}

android.applicationVariants.all { variant ->
    // delete previous files first
    delete "${buildDir}/intermediates/assets/${variant.dirName}"

    variant.mergeAssets.doLast {
        copy {
           from "${buildDir}/../../../../../res"
           into "${buildDir}/intermediates/assets/${variant.dirName}/res"
        }

        copy {
            from "${buildDir}/../../../../../src"
            into "${buildDir}/intermediates/assets/${variant.dirName}/src"
        }

        copy {
            from "${buildDir}/../../../../cocos2d-x/cocos/scripting/js-bindings/script"
            into  "${buildDir}/intermediates/assets/${variant.dirName}/script"
        }

        copy {
            from "${buildDir}/../../../../../main.js"
            from "${buildDir}/../../../../../project.json"
            into "${buildDir}/intermediates/assets/${variant.dirName}"
        }

        // compile the scripts if necessary
        def compileScript = (variant.name.compareTo('release') == 0)
        if (project.hasProperty('PROP_COMPILE_SCRIPT')) {
            compileScript = (PROP_COMPILE_SCRIPT.compareTo('1') == 0)
        }

        if (compileScript) {
            compileJS("${b  uildDir}/intermediates/assets/${variant.dirName}",
                      "${buildDir}/intermediates/assets/${variant.dirName}")
        }
    }
}
repositories {
    flatDir {
        dirs 'libs'
    }
}
dependencies {
//    compile fileTree(dir: 'libs', include: ['*.jar',".aar"])
    compile project(':libcocos2dx')
    compile(name: 'UPAdsSdk_CocosJs_3.0.07.6_dex', ext: 'aar')

    compile(name: 'gson-2.7', ext: 'jar')
    compile(name: 'glide-3.7.0', ext: 'jar')
    compile(name: 'android-query-full.0.26.7',ext: 'jar')
    compile(name:'playable_ads',ext:'aar')
    //inland
    compile(name: 'gdt_ads', ext: 'aar')
    compile(name: 'mintegral_ads', ext: 'aar')
    compile(name: 'oneway_ads', ext: 'aar')
    compile(name: 'playable_ads', ext: 'aar')
    compile(name: 'toutiao_ads', ext: 'aar')
    compile(name: 'vungle_ads', ext: 'aar')
    compile(name: 'android-gif-drawable', ext: 'aar')
    //30067新增的两个联盟
    compile(name: 'sigmob_ads',ext:'aar')
    compile(name: 'baidu_ads',ext:'aar')

    compile 'com.android.support:support-v4:26.1.0'
    compile 'com.android.support:appcompat-v7:26.1.0'
    compile 'com.android.support:multidex:1.0.1'
    compile 'com.android.support:recyclerview-v7:26.1.0'

}
